
bluetooth_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003358  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800351c  0800351c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003524  08003524  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003524  08003524  00013524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800352c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad8  2000000c  08003538  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  08003538  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff99  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000225e  00000000  00000000  0002ffd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  00032238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  000330f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000249a5  00000000  00000000  00033e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb39  00000000  00000000  00058835  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000deccd  00000000  00000000  0006436e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014303b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d58  00000000  00000000  001430b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080034ec 	.word	0x080034ec

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080034ec 	.word	0x080034ec

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fb06 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f82e 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f93a 	bl	8000770 <MX_GPIO_Init>
  MX_TIM6_Init();
 80004fc:	f000 f8d8 	bl	80006b0 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f90c 	bl	800071c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000504:	f000 f8ae 	bl	8000664 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 8000508:	20c8      	movs	r0, #200	; 0xc8
 800050a:	f000 fb6b 	bl	8000be4 <HAL_Delay>
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2102      	movs	r1, #2
 8000512:	480c      	ldr	r0, [pc, #48]	; (8000544 <main+0x58>)
 8000514:	f000 fe66 	bl	80011e4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051c:	f000 fb62 	bl	8000be4 <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 8000520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000524:	2100      	movs	r1, #0
 8000526:	4808      	ldr	r0, [pc, #32]	; (8000548 <main+0x5c>)
 8000528:	f002 ffd8 	bl	80034dc <memset>
  HAL_TIM_Base_Start_IT(&htim6);
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <main+0x60>)
 800052e:	f001 fe28 	bl	8002182 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <main+0x64>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	68da      	ldr	r2, [r3, #12]
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <main+0x64>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f042 0220 	orr.w	r2, r2, #32
 8000540:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000542:	e7fe      	b.n	8000542 <main+0x56>
 8000544:	40021400 	.word	0x40021400
 8000548:	20000670 	.word	0x20000670
 800054c:	2000008c 	.word	0x2000008c
 8000550:	2000002c 	.word	0x2000002c

08000554 <SystemClock_Config>:
	  {
	    Error_Handler();
	  }
}
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b0a0      	sub	sp, #128	; 0x80
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 ffba 	bl	80034dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2230      	movs	r2, #48	; 0x30
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f002 ffab 	bl	80034dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	4b34      	ldr	r3, [pc, #208]	; (800065c <SystemClock_Config+0x108>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	4a33      	ldr	r2, [pc, #204]	; (800065c <SystemClock_Config+0x108>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000594:	6413      	str	r3, [r2, #64]	; 0x40
 8000596:	4b31      	ldr	r3, [pc, #196]	; (800065c <SystemClock_Config+0x108>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <SystemClock_Config+0x10c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a2d      	ldr	r2, [pc, #180]	; (8000660 <SystemClock_Config+0x10c>)
 80005ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <SystemClock_Config+0x10c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005be:	230a      	movs	r3, #10
 80005c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2310      	movs	r3, #16
 80005c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005ca:	2301      	movs	r3, #1
 80005cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d2:	2300      	movs	r3, #0
 80005d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d6:	2308      	movs	r3, #8
 80005d8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005da:	23b4      	movs	r3, #180	; 0xb4
 80005dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fe64 	bl	80012b8 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005f6:	f000 f919 	bl	800082c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005fa:	f000 fe0d 	bl	8001218 <HAL_PWREx_EnableOverDrive>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000604:	f000 f912 	bl	800082c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000614:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000620:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000624:	2105      	movs	r1, #5
 8000626:	4618      	mov	r0, r3
 8000628:	f001 f8b6 	bl	8001798 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000632:	f000 f8fb 	bl	800082c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000636:	2320      	movs	r3, #32
 8000638:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800063a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800063e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fa73 	bl	8001b30 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000650:	f000 f8ec 	bl	800082c <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3780      	adds	r7, #128	; 0x80
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_RTC_Init+0x44>)
 800066a:	4a10      	ldr	r2, [pc, #64]	; (80006ac <MX_RTC_Init+0x48>)
 800066c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_RTC_Init+0x44>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_RTC_Init+0x44>)
 8000676:	227f      	movs	r2, #127	; 0x7f
 8000678:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_RTC_Init+0x44>)
 800067c:	22ff      	movs	r2, #255	; 0xff
 800067e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_RTC_Init+0x44>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_RTC_Init+0x44>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_RTC_Init+0x44>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_RTC_Init+0x44>)
 8000694:	f001 fc0a 	bl	8001eac <HAL_RTC_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800069e:	f000 f8c5 	bl	800082c <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000006c 	.word	0x2000006c
 80006ac:	40002800 	.word	0x40002800

080006b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_TIM6_Init+0x64>)
 80006c0:	4a15      	ldr	r2, [pc, #84]	; (8000718 <MX_TIM6_Init+0x68>)
 80006c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 720;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_TIM6_Init+0x64>)
 80006c6:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80006ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_TIM6_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_TIM6_Init+0x64>)
 80006d4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80006d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_TIM6_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_TIM6_Init+0x64>)
 80006e2:	f001 fd23 	bl	800212c <HAL_TIM_Base_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006ec:	f000 f89e 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_TIM6_Init+0x64>)
 80006fe:	f001 ff3f 	bl	8002580 <HAL_TIMEx_MasterConfigSynchronization>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000708:	f000 f890 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000008c 	.word	0x2000008c
 8000718:	40001000 	.word	0x40001000

0800071c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART1_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000728:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800072c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000754:	f001 ffa4 	bl	80026a0 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f865 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000002c 	.word	0x2000002c
 800076c:	40011000 	.word	0x40011000

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <MX_GPIO_Init+0xb4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a25      	ldr	r2, [pc, #148]	; (8000824 <MX_GPIO_Init+0xb4>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_GPIO_Init+0xb4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a17      	ldr	r2, [pc, #92]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_GPIO_Init+0xb4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2102      	movs	r1, #2
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <MX_GPIO_Init+0xb8>)
 80007fc:	f000 fcf2 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BluetoothReset_Pin */
  GPIO_InitStruct.Pin = BluetoothReset_Pin;
 8000800:	2302      	movs	r3, #2
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BluetoothReset_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0xb8>)
 8000818:	f000 fb3a 	bl	8000e90 <HAL_GPIO_Init>

}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40021400 	.word	0x40021400

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000832:	e7fe      	b.n	8000832 <Error_Handler+0x6>

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_RTC_MspInit+0x30>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d10a      	bne.n	80008ac <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_RTC_MspInit+0x34>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	2029      	movs	r0, #41	; 0x29
 80008a2:	f000 fa9c 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80008a6:	2029      	movs	r0, #41	; 0x29
 80008a8:	f000 fab5 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40002800 	.word	0x40002800
 80008b8:	42470e3c 	.word	0x42470e3c

080008bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <HAL_TIM_Base_MspInit+0x48>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d115      	bne.n	80008fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_TIM_Base_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <HAL_TIM_Base_MspInit+0x4c>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_TIM_Base_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2036      	movs	r0, #54	; 0x36
 80008f0:	f000 fa75 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008f4:	2036      	movs	r0, #54	; 0x36
 80008f6:	f000 fa8e 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40001000 	.word	0x40001000
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <HAL_UART_MspInit+0x94>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d134      	bne.n	8000998 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_UART_MspInit+0x98>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <HAL_UART_MspInit+0x98>)
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_UART_MspInit+0x98>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f003 0310 	and.w	r3, r3, #16
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_UART_MspInit+0x98>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <HAL_UART_MspInit+0x98>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_UART_MspInit+0x98>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_RX_Pin|Bluetooth_TX_Pin;
 8000966:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000978:	2307      	movs	r3, #7
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4809      	ldr	r0, [pc, #36]	; (80009a8 <HAL_UART_MspInit+0x9c>)
 8000984:	f000 fa84 	bl	8000e90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2025      	movs	r0, #37	; 0x25
 800098e:	f000 fa26 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000992:	2025      	movs	r0, #37	; 0x25
 8000994:	f000 fa3f 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f8d4 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_Receive(&huart1, (uint8_t*)&buffer[buffer_index], 1, 10);
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <USART1_IRQHandler+0x30>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <USART1_IRQHandler+0x34>)
 8000a0c:	18d1      	adds	r1, r2, r3
 8000a0e:	230a      	movs	r3, #10
 8000a10:	2201      	movs	r2, #1
 8000a12:	4809      	ldr	r0, [pc, #36]	; (8000a38 <USART1_IRQHandler+0x38>)
 8000a14:	f001 fe91 	bl	800273a <HAL_UART_Receive>
	buffer_index++;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <USART1_IRQHandler+0x30>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <USART1_IRQHandler+0x30>)
 8000a22:	701a      	strb	r2, [r3, #0]
		//Process_string(schedule[0]);
		//set_alarm(mtime, mdate, apm);
		//memset(buffer, 0, sizeof(buffer));
	//}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <USART1_IRQHandler+0x38>)
 8000a26:	f001 ff2f 	bl	8002888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000029 	.word	0x20000029
 8000a34:	20000670 	.word	0x20000670
 8000a38:	2000002c 	.word	0x2000002c

08000a3c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <RTC_Alarm_IRQHandler+0x10>)
 8000a42:	f001 fac5 	bl	8001fd0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000006c 	.word	0x2000006c

08000a50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	if(strlen(buffer)>0)
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <TIM6_DAC_IRQHandler+0x24>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d005      	beq.n	8000a68 <TIM6_DAC_IRQHandler+0x18>
		timer_count++;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <TIM6_DAC_IRQHandler+0x28>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <TIM6_DAC_IRQHandler+0x28>)
 8000a66:	701a      	strb	r2, [r3, #0]
		//Individual_med(schedule[0],)
		//Process_string(schedule[0]);
		timer_count = 0;
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <TIM6_DAC_IRQHandler+0x2c>)
 8000a6a:	f001 fbae 	bl	80021ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000670 	.word	0x20000670
 8000a78:	20000028 	.word	0x20000028
 8000a7c:	2000008c 	.word	0x2000008c

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <SystemInit+0x28>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <SystemInit+0x28>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <SystemInit+0x28>)
 8000a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ab0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ab2:	e003      	b.n	8000abc <LoopCopyDataInit>

08000ab4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ab6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ab8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aba:	3104      	adds	r1, #4

08000abc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ac0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ac4:	d3f6      	bcc.n	8000ab4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ac8:	e002      	b.n	8000ad0 <LoopFillZerobss>

08000aca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000acc:	f842 3b04 	str.w	r3, [r2], #4

08000ad0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ad2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ad4:	d3f9      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ad6:	f7ff ffd3 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f002 fcdb 	bl	8003494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fd05 	bl	80004ec <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ae4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000ae8:	0800352c 	.word	0x0800352c
  ldr  r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000af0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000af4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000af8:	20000ae4 	.word	0x20000ae4

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_Init+0x40>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_Init+0x40>)
 8000b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x40>)
 8000b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f94d 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f808 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fe7e 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023c00 	.word	0x40023c00

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x54>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x58>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f965 	bl	8000e32 <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00e      	b.n	8000b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d80a      	bhi.n	8000b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f000 f92d 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_InitTick+0x5c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x20>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000ae0 	.word	0x20000ae0

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_GetTick+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000ae0 	.word	0x20000ae0

08000be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bec:	f7ff ffee 	bl	8000bcc <HAL_GetTick>
 8000bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfc:	d005      	beq.n	8000c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_Delay+0x40>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c0a:	bf00      	nop
 8000c0c:	f7ff ffde 	bl	8000bcc <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d8f7      	bhi.n	8000c0c <HAL_Delay+0x28>
  {
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000008 	.word	0x20000008

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff29 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff3e 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff31 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffa2 	bl	8000d84 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d004      	beq.n	8000e68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e00c      	b.n	8000e82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2205      	movs	r2, #5
 8000e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	e177      	b.n	800119c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	f040 8166 	bne.w	8001196 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d00b      	beq.n	8000eea <HAL_GPIO_Init+0x5a>
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ede:	2b11      	cmp	r3, #17
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b12      	cmp	r3, #18
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0xfc>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b12      	cmp	r3, #18
 8000f8a:	d123      	bne.n	8000fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	08da      	lsrs	r2, r3, #3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3208      	adds	r2, #8
 8000f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	69b9      	ldr	r1, [r7, #24]
 8000fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0203 	and.w	r2, r3, #3
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 80c0 	beq.w	8001196 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b65      	ldr	r3, [pc, #404]	; (80011b0 <HAL_GPIO_Init+0x320>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a64      	ldr	r2, [pc, #400]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b62      	ldr	r3, [pc, #392]	; (80011b0 <HAL_GPIO_Init+0x320>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001032:	4a60      	ldr	r2, [pc, #384]	; (80011b4 <HAL_GPIO_Init+0x324>)
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a57      	ldr	r2, [pc, #348]	; (80011b8 <HAL_GPIO_Init+0x328>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d037      	beq.n	80010ce <HAL_GPIO_Init+0x23e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a56      	ldr	r2, [pc, #344]	; (80011bc <HAL_GPIO_Init+0x32c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d031      	beq.n	80010ca <HAL_GPIO_Init+0x23a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a55      	ldr	r2, [pc, #340]	; (80011c0 <HAL_GPIO_Init+0x330>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d02b      	beq.n	80010c6 <HAL_GPIO_Init+0x236>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a54      	ldr	r2, [pc, #336]	; (80011c4 <HAL_GPIO_Init+0x334>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d025      	beq.n	80010c2 <HAL_GPIO_Init+0x232>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a53      	ldr	r2, [pc, #332]	; (80011c8 <HAL_GPIO_Init+0x338>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d01f      	beq.n	80010be <HAL_GPIO_Init+0x22e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a52      	ldr	r2, [pc, #328]	; (80011cc <HAL_GPIO_Init+0x33c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d019      	beq.n	80010ba <HAL_GPIO_Init+0x22a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a51      	ldr	r2, [pc, #324]	; (80011d0 <HAL_GPIO_Init+0x340>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d013      	beq.n	80010b6 <HAL_GPIO_Init+0x226>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <HAL_GPIO_Init+0x344>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00d      	beq.n	80010b2 <HAL_GPIO_Init+0x222>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4f      	ldr	r2, [pc, #316]	; (80011d8 <HAL_GPIO_Init+0x348>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d007      	beq.n	80010ae <HAL_GPIO_Init+0x21e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4e      	ldr	r2, [pc, #312]	; (80011dc <HAL_GPIO_Init+0x34c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_GPIO_Init+0x21a>
 80010a6:	2309      	movs	r3, #9
 80010a8:	e012      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010aa:	230a      	movs	r3, #10
 80010ac:	e010      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010ae:	2308      	movs	r3, #8
 80010b0:	e00e      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010b2:	2307      	movs	r3, #7
 80010b4:	e00c      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010b6:	2306      	movs	r3, #6
 80010b8:	e00a      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010ba:	2305      	movs	r3, #5
 80010bc:	e008      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010be:	2304      	movs	r3, #4
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x240>
 80010ce:	2300      	movs	r3, #0
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e0:	4934      	ldr	r1, [pc, #208]	; (80011b4 <HAL_GPIO_Init+0x324>)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ee:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <HAL_GPIO_Init+0x350>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001112:	4a33      	ldr	r2, [pc, #204]	; (80011e0 <HAL_GPIO_Init+0x350>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <HAL_GPIO_Init+0x350>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113c:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <HAL_GPIO_Init+0x350>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001142:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <HAL_GPIO_Init+0x350>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001166:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_GPIO_Init+0x350>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_GPIO_Init+0x350>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001190:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <HAL_GPIO_Init+0x350>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3301      	adds	r3, #1
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	f67f ae84 	bls.w	8000eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a4:	bf00      	nop
 80011a6:	3724      	adds	r7, #36	; 0x24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020c00 	.word	0x40020c00
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40021400 	.word	0x40021400
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40021c00 	.word	0x40021c00
 80011d8:	40022000 	.word	0x40022000
 80011dc:	40022400 	.word	0x40022400
 80011e0:	40013c00 	.word	0x40013c00

080011e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001200:	e003      	b.n	800120a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	041a      	lsls	r2, r3, #16
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_PWREx_EnableOverDrive+0x94>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001244:	f7ff fcc2 	bl	8000bcc <HAL_GetTick>
 8001248:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800124a:	e009      	b.n	8001260 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800124c:	f7ff fcbe 	bl	8000bcc <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800125a:	d901      	bls.n	8001260 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e01f      	b.n	80012a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d1ee      	bne.n	800124c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001274:	f7ff fcaa 	bl	8000bcc <HAL_GetTick>
 8001278:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800127a:	e009      	b.n	8001290 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800127c:	f7ff fca6 	bl	8000bcc <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800128a:	d901      	bls.n	8001290 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e007      	b.n	80012a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800129c:	d1ee      	bne.n	800127c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	420e0040 	.word	0x420e0040
 80012b0:	40007000 	.word	0x40007000
 80012b4:	420e0044 	.word	0x420e0044

080012b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e25b      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d075      	beq.n	80013c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	4ba3      	ldr	r3, [pc, #652]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d00c      	beq.n	80012fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4ba0      	ldr	r3, [pc, #640]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d112      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b9d      	ldr	r3, [pc, #628]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012fa:	d10b      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	4b99      	ldr	r3, [pc, #612]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d05b      	beq.n	80013c0 <HAL_RCC_OscConfig+0x108>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d157      	bne.n	80013c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e236      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d106      	bne.n	800132c <HAL_RCC_OscConfig+0x74>
 800131e:	4b91      	ldr	r3, [pc, #580]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a90      	ldr	r2, [pc, #576]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e01d      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x98>
 8001336:	4b8b      	ldr	r3, [pc, #556]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a8a      	ldr	r2, [pc, #552]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b88      	ldr	r3, [pc, #544]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a87      	ldr	r2, [pc, #540]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 8001350:	4b84      	ldr	r3, [pc, #528]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a83      	ldr	r2, [pc, #524]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b81      	ldr	r3, [pc, #516]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a80      	ldr	r2, [pc, #512]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc2c 	bl	8000bcc <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fc28 	bl	8000bcc <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1fb      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b76      	ldr	r3, [pc, #472]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xc0>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fc18 	bl	8000bcc <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fc14 	bl	8000bcc <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1e7      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b6c      	ldr	r3, [pc, #432]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0xe8>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d063      	beq.n	8001496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	4b65      	ldr	r3, [pc, #404]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b62      	ldr	r3, [pc, #392]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4b5c      	ldr	r3, [pc, #368]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1bb      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4952      	ldr	r1, [pc, #328]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e03a      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d020      	beq.n	800146a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b4f      	ldr	r3, [pc, #316]	; (8001568 <HAL_RCC_OscConfig+0x2b0>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fbcd 	bl	8000bcc <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fbc9 	bl	8000bcc <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e19c      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	4b46      	ldr	r3, [pc, #280]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b43      	ldr	r3, [pc, #268]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4940      	ldr	r1, [pc, #256]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e015      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146a:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <HAL_RCC_OscConfig+0x2b0>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fbac 	bl	8000bcc <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fba8 	bl	8000bcc <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e17b      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d030      	beq.n	8001504 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d016      	beq.n	80014d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014aa:	4b30      	ldr	r3, [pc, #192]	; (800156c <HAL_RCC_OscConfig+0x2b4>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fb8c 	bl	8000bcc <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fb88 	bl	8000bcc <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e15b      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x200>
 80014d6:	e015      	b.n	8001504 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_RCC_OscConfig+0x2b4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fb75 	bl	8000bcc <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff fb71 	bl	8000bcc <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e144      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a0 	beq.w	8001652 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d121      	bne.n	8001592 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_RCC_OscConfig+0x2b8>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fb37 	bl	8000bcc <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e011      	b.n	8001586 <HAL_RCC_OscConfig+0x2ce>
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	42470000 	.word	0x42470000
 800156c:	42470e80 	.word	0x42470e80
 8001570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001574:	f7ff fb2a 	bl	8000bcc <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e0fd      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b81      	ldr	r3, [pc, #516]	; (800178c <HAL_RCC_OscConfig+0x4d4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d106      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
 800159a:	4b7d      	ldr	r3, [pc, #500]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	4a7c      	ldr	r2, [pc, #496]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6713      	str	r3, [r2, #112]	; 0x70
 80015a6:	e01c      	b.n	80015e2 <HAL_RCC_OscConfig+0x32a>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x312>
 80015b0:	4b77      	ldr	r3, [pc, #476]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a76      	ldr	r2, [pc, #472]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	4b74      	ldr	r3, [pc, #464]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a73      	ldr	r2, [pc, #460]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x32a>
 80015ca:	4b71      	ldr	r3, [pc, #452]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	4a70      	ldr	r2, [pc, #448]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6713      	str	r3, [r2, #112]	; 0x70
 80015d6:	4b6e      	ldr	r3, [pc, #440]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a6d      	ldr	r2, [pc, #436]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d015      	beq.n	8001616 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ea:	f7ff faef 	bl	8000bcc <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff faeb 	bl	8000bcc <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0bc      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	4b61      	ldr	r3, [pc, #388]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ee      	beq.n	80015f2 <HAL_RCC_OscConfig+0x33a>
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fad9 	bl	8000bcc <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fad5 	bl	8000bcc <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0a6      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	4b56      	ldr	r3, [pc, #344]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ee      	bne.n	800161e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d105      	bne.n	8001652 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001646:	4b52      	ldr	r3, [pc, #328]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a51      	ldr	r2, [pc, #324]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800164c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8092 	beq.w	8001780 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165c:	4b4c      	ldr	r3, [pc, #304]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d05c      	beq.n	8001722 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d141      	bne.n	80016f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001670:	4b48      	ldr	r3, [pc, #288]	; (8001794 <HAL_RCC_OscConfig+0x4dc>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff faa9 	bl	8000bcc <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff faa5 	bl	8000bcc <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e078      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001690:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69da      	ldr	r2, [r3, #28]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	019b      	lsls	r3, r3, #6
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	061b      	lsls	r3, r3, #24
 80016c0:	4933      	ldr	r1, [pc, #204]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fa7e 	bl	8000bcc <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff fa7a 	bl	8000bcc <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e04d      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x41c>
 80016f2:	e045      	b.n	8001780 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_RCC_OscConfig+0x4dc>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fa67 	bl	8000bcc <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fa63 	bl	8000bcc <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e036      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x44a>
 8001720:	e02e      	b.n	8001780 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e029      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_RCC_OscConfig+0x4d8>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	429a      	cmp	r2, r3
 8001740:	d11c      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d115      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001756:	4013      	ands	r3, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800175c:	4293      	cmp	r3, r2
 800175e:	d10d      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800176a:	429a      	cmp	r2, r3
 800176c:	d106      	bne.n	800177c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40007000 	.word	0x40007000
 8001790:	40023800 	.word	0x40023800
 8001794:	42470060 	.word	0x42470060

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0cc      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d90c      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d044      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d119      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e067      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4934      	ldr	r1, [pc, #208]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff f9a0 	bl	8000bcc <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff f99c 	bl	8000bcc <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20c      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4601      	mov	r1, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	fa21 f303 	lsr.w	r3, r1, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f900 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00
 8001954:	40023800 	.word	0x40023800
 8001958:	08003504 	.word	0x08003504
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197a:	4b50      	ldr	r3, [pc, #320]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b04      	cmp	r3, #4
 8001984:	d007      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x32>
 8001986:	2b08      	cmp	r3, #8
 8001988:	d008      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x38>
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 808d 	bne.w	8001aaa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001992:	60bb      	str	r3, [r7, #8]
       break;
 8001994:	e08c      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001996:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001998:	60bb      	str	r3, [r7, #8]
      break;
 800199a:	e089      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800199c:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a6:	4b45      	ldr	r3, [pc, #276]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d023      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	f04f 0400 	mov.w	r4, #0
 80019bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	ea03 0501 	and.w	r5, r3, r1
 80019c8:	ea04 0602 	and.w	r6, r4, r2
 80019cc:	4a3d      	ldr	r2, [pc, #244]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80019ce:	fb02 f106 	mul.w	r1, r2, r6
 80019d2:	2200      	movs	r2, #0
 80019d4:	fb02 f205 	mul.w	r2, r2, r5
 80019d8:	440a      	add	r2, r1
 80019da:	493a      	ldr	r1, [pc, #232]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0x160>)
 80019dc:	fba5 0101 	umull	r0, r1, r5, r1
 80019e0:	1853      	adds	r3, r2, r1
 80019e2:	4619      	mov	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f04f 0400 	mov.w	r4, #0
 80019ea:	461a      	mov	r2, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	f7fe fbfd 	bl	80001ec <__aeabi_uldivmod>
 80019f2:	4603      	mov	r3, r0
 80019f4:	460c      	mov	r4, r1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	e049      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	099b      	lsrs	r3, r3, #6
 8001a00:	f04f 0400 	mov.w	r4, #0
 8001a04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	ea03 0501 	and.w	r5, r3, r1
 8001a10:	ea04 0602 	and.w	r6, r4, r2
 8001a14:	4629      	mov	r1, r5
 8001a16:	4632      	mov	r2, r6
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	f04f 0400 	mov.w	r4, #0
 8001a20:	0154      	lsls	r4, r2, #5
 8001a22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a26:	014b      	lsls	r3, r1, #5
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	1b49      	subs	r1, r1, r5
 8001a2e:	eb62 0206 	sbc.w	r2, r2, r6
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	f04f 0400 	mov.w	r4, #0
 8001a3a:	0194      	lsls	r4, r2, #6
 8001a3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a40:	018b      	lsls	r3, r1, #6
 8001a42:	1a5b      	subs	r3, r3, r1
 8001a44:	eb64 0402 	sbc.w	r4, r4, r2
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	00e2      	lsls	r2, r4, #3
 8001a52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a56:	00d9      	lsls	r1, r3, #3
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	195b      	adds	r3, r3, r5
 8001a5e:	eb44 0406 	adc.w	r4, r4, r6
 8001a62:	f04f 0100 	mov.w	r1, #0
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	02a2      	lsls	r2, r4, #10
 8001a6c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a70:	0299      	lsls	r1, r3, #10
 8001a72:	460b      	mov	r3, r1
 8001a74:	4614      	mov	r4, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	4621      	mov	r1, r4
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f04f 0400 	mov.w	r4, #0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	f7fe fbb2 	bl	80001ec <__aeabi_uldivmod>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	460c      	mov	r4, r1
 8001a8c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_GetSysClockFreq+0x158>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	0c1b      	lsrs	r3, r3, #16
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	60bb      	str	r3, [r7, #8]
      break;
 8001aa8:	e002      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001aac:	60bb      	str	r3, [r7, #8]
      break;
 8001aae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	017d7840 	.word	0x017d7840

08001ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000

08001ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae4:	f7ff fff0 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4601      	mov	r1, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0a9b      	lsrs	r3, r3, #10
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4a03      	ldr	r2, [pc, #12]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08003514 	.word	0x08003514

08001b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b0c:	f7ff ffdc 	bl	8001ac8 <HAL_RCC_GetHCLKFreq>
 8001b10:	4601      	mov	r1, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0b5b      	lsrs	r3, r3, #13
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08003514 	.word	0x08003514

08001b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10b      	bne.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d105      	bne.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d075      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b64:	4bad      	ldr	r3, [pc, #692]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b6a:	f7ff f82f 	bl	8000bcc <HAL_GetTick>
 8001b6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b72:	f7ff f82b 	bl	8000bcc <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e18b      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b84:	4ba6      	ldr	r3, [pc, #664]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d009      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	019a      	lsls	r2, r3, #6
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	071b      	lsls	r3, r3, #28
 8001ba8:	499d      	ldr	r1, [pc, #628]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01f      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001bbc:	4b98      	ldr	r3, [pc, #608]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bc2:	0f1b      	lsrs	r3, r3, #28
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	019a      	lsls	r2, r3, #6
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	071b      	lsls	r3, r3, #28
 8001bdc:	4990      	ldr	r1, [pc, #576]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001be4:	4b8e      	ldr	r3, [pc, #568]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bea:	f023 021f 	bic.w	r2, r3, #31
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	498a      	ldr	r1, [pc, #552]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00d      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	019a      	lsls	r2, r3, #6
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	061b      	lsls	r3, r3, #24
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	071b      	lsls	r3, r3, #28
 8001c1c:	4980      	ldr	r1, [pc, #512]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c24:	4b7d      	ldr	r3, [pc, #500]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c2a:	f7fe ffcf 	bl	8000bcc <HAL_GetTick>
 8001c2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c32:	f7fe ffcb 	bl	8000bcc <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e12b      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c44:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d079      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001c68:	4b6e      	ldr	r3, [pc, #440]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c6e:	f7fe ffad 	bl	8000bcc <HAL_GetTick>
 8001c72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c76:	f7fe ffa9 	bl	8000bcc <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e109      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c88:	4b65      	ldr	r3, [pc, #404]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c94:	d0ef      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ca2:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca8:	0f1b      	lsrs	r3, r3, #28
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	019a      	lsls	r2, r3, #6
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	061b      	lsls	r3, r3, #24
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	071b      	lsls	r3, r3, #28
 8001cc2:	4957      	ldr	r1, [pc, #348]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001cca:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cd0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	4950      	ldr	r1, [pc, #320]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01e      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001cf0:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	0e1b      	lsrs	r3, r3, #24
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	019a      	lsls	r2, r3, #6
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	061b      	lsls	r3, r3, #24
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	071b      	lsls	r3, r3, #28
 8001d10:	4943      	ldr	r1, [pc, #268]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001d18:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	493e      	ldr	r1, [pc, #248]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d34:	f7fe ff4a 	bl	8000bcc <HAL_GetTick>
 8001d38:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001d3c:	f7fe ff46 	bl	8000bcc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0a6      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d5a:	d1ef      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 808d 	beq.w	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a2b      	ldr	r2, [pc, #172]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d86:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a27      	ldr	r2, [pc, #156]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d92:	f7fe ff1b 	bl	8000bcc <HAL_GetTick>
 8001d96:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d9a:	f7fe ff17 	bl	8000bcc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e077      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d039      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d032      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dde:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001dec:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d11e      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7fe fee5 	bl	8000bcc <HAL_GetTick>
 8001e02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	e014      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe fee1 	bl	8000bcc <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d90b      	bls.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e03f      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8001e1c:	42470068 	.word	0x42470068
 8001e20:	40023800 	.word	0x40023800
 8001e24:	42470070 	.word	0x42470070
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0e4      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e48:	d10d      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e5e:	4911      	ldr	r1, [pc, #68]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
 8001e64:	e005      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e70:	6093      	str	r3, [r2, #8]
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7e:	4909      	ldr	r1, [pc, #36]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d004      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8001e98:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	424711e0 	.word	0x424711e0

08001eac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e083      	b.n	8001fc6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7f5b      	ldrb	r3, [r3, #29]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fcd8 	bl	8000884 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	22ca      	movs	r2, #202	; 0xca
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2253      	movs	r2, #83	; 0x53
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8e8 	bl	80020c0 <RTC_EnterInitMode>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	22ff      	movs	r2, #255	; 0xff
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2204      	movs	r2, #4
 8001f02:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e05e      	b.n	8001fc6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f1a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6899      	ldr	r1, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68d2      	ldr	r2, [r2, #12]
 8001f42:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6919      	ldr	r1, [r3, #16]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	041a      	lsls	r2, r3, #16
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f66:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10e      	bne.n	8001f94 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f87a 	bl	8002070 <HAL_RTC_WaitForSynchro>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	22ff      	movs	r2, #255	; 0xff
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e018      	b.n	8001fc6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699a      	ldr	r2, [r3, #24]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	22ff      	movs	r2, #255	; 0xff
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
  }
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d012      	beq.n	800200c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00b      	beq.n	800200c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f831 	bl	800205c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800200a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d012      	beq.n	8002040 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00b      	beq.n	8002040 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f875 	bl	8002118 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800203e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002042:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002046:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	775a      	strb	r2, [r3, #29]
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40013c00 	.word	0x40013c00

0800205c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800208a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800208c:	f7fe fd9e 	bl	8000bcc <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002092:	e009      	b.n	80020a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002094:	f7fe fd9a 	bl	8000bcc <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020a2:	d901      	bls.n	80020a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e007      	b.n	80020b8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ee      	beq.n	8002094 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d119      	bne.n	800210e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f04f 32ff 	mov.w	r2, #4294967295
 80020e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020e4:	f7fe fd72 	bl	8000bcc <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80020ea:	e009      	b.n	8002100 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80020ec:	f7fe fd6e 	bl	8000bcc <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020fa:	d901      	bls.n	8002100 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e007      	b.n	8002110 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0ee      	beq.n	80020ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e01d      	b.n	800217a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fbb2 	bl	80008bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3304      	adds	r3, #4
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f000 f968 	bl	8002440 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0201 	orr.w	r2, r2, #1
 8002198:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b06      	cmp	r3, #6
 80021aa:	d007      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d122      	bne.n	8002226 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d11b      	bne.n	8002226 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f06f 0202 	mvn.w	r2, #2
 80021f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f8f8 	bl	8002402 <HAL_TIM_IC_CaptureCallback>
 8002212:	e005      	b.n	8002220 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f8ea 	bl	80023ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f8fb 	bl	8002416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b04      	cmp	r3, #4
 8002232:	d122      	bne.n	800227a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b04      	cmp	r3, #4
 8002240:	d11b      	bne.n	800227a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f06f 0204 	mvn.w	r2, #4
 800224a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f8ce 	bl	8002402 <HAL_TIM_IC_CaptureCallback>
 8002266:	e005      	b.n	8002274 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f8c0 	bl	80023ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f8d1 	bl	8002416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b08      	cmp	r3, #8
 8002286:	d122      	bne.n	80022ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b08      	cmp	r3, #8
 8002294:	d11b      	bne.n	80022ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f06f 0208 	mvn.w	r2, #8
 800229e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2204      	movs	r2, #4
 80022a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f8a4 	bl	8002402 <HAL_TIM_IC_CaptureCallback>
 80022ba:	e005      	b.n	80022c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f896 	bl	80023ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f8a7 	bl	8002416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d122      	bne.n	8002322 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d11b      	bne.n	8002322 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f06f 0210 	mvn.w	r2, #16
 80022f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2208      	movs	r2, #8
 80022f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f87a 	bl	8002402 <HAL_TIM_IC_CaptureCallback>
 800230e:	e005      	b.n	800231c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f86c 	bl	80023ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f87d 	bl	8002416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10e      	bne.n	800234e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b01      	cmp	r3, #1
 800233c:	d107      	bne.n	800234e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f06f 0201 	mvn.w	r2, #1
 8002346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f846 	bl	80023da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002358:	2b80      	cmp	r3, #128	; 0x80
 800235a:	d10e      	bne.n	800237a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002366:	2b80      	cmp	r3, #128	; 0x80
 8002368:	d107      	bne.n	800237a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f989 	bl	800268c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002384:	2b40      	cmp	r3, #64	; 0x40
 8002386:	d10e      	bne.n	80023a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002392:	2b40      	cmp	r3, #64	; 0x40
 8002394:	d107      	bne.n	80023a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800239e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f842 	bl	800242a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d10e      	bne.n	80023d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b20      	cmp	r3, #32
 80023c0:	d107      	bne.n	80023d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f06f 0220 	mvn.w	r2, #32
 80023ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f953 	bl	8002678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a40      	ldr	r2, [pc, #256]	; (8002554 <TIM_Base_SetConfig+0x114>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d013      	beq.n	8002480 <TIM_Base_SetConfig+0x40>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245e:	d00f      	beq.n	8002480 <TIM_Base_SetConfig+0x40>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3d      	ldr	r2, [pc, #244]	; (8002558 <TIM_Base_SetConfig+0x118>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00b      	beq.n	8002480 <TIM_Base_SetConfig+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3c      	ldr	r2, [pc, #240]	; (800255c <TIM_Base_SetConfig+0x11c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d007      	beq.n	8002480 <TIM_Base_SetConfig+0x40>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3b      	ldr	r2, [pc, #236]	; (8002560 <TIM_Base_SetConfig+0x120>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d003      	beq.n	8002480 <TIM_Base_SetConfig+0x40>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a3a      	ldr	r2, [pc, #232]	; (8002564 <TIM_Base_SetConfig+0x124>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d108      	bne.n	8002492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a2f      	ldr	r2, [pc, #188]	; (8002554 <TIM_Base_SetConfig+0x114>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d02b      	beq.n	80024f2 <TIM_Base_SetConfig+0xb2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a0:	d027      	beq.n	80024f2 <TIM_Base_SetConfig+0xb2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <TIM_Base_SetConfig+0x118>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d023      	beq.n	80024f2 <TIM_Base_SetConfig+0xb2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a2b      	ldr	r2, [pc, #172]	; (800255c <TIM_Base_SetConfig+0x11c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d01f      	beq.n	80024f2 <TIM_Base_SetConfig+0xb2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a2a      	ldr	r2, [pc, #168]	; (8002560 <TIM_Base_SetConfig+0x120>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01b      	beq.n	80024f2 <TIM_Base_SetConfig+0xb2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a29      	ldr	r2, [pc, #164]	; (8002564 <TIM_Base_SetConfig+0x124>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d017      	beq.n	80024f2 <TIM_Base_SetConfig+0xb2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a28      	ldr	r2, [pc, #160]	; (8002568 <TIM_Base_SetConfig+0x128>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d013      	beq.n	80024f2 <TIM_Base_SetConfig+0xb2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a27      	ldr	r2, [pc, #156]	; (800256c <TIM_Base_SetConfig+0x12c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00f      	beq.n	80024f2 <TIM_Base_SetConfig+0xb2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a26      	ldr	r2, [pc, #152]	; (8002570 <TIM_Base_SetConfig+0x130>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00b      	beq.n	80024f2 <TIM_Base_SetConfig+0xb2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a25      	ldr	r2, [pc, #148]	; (8002574 <TIM_Base_SetConfig+0x134>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <TIM_Base_SetConfig+0xb2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a24      	ldr	r2, [pc, #144]	; (8002578 <TIM_Base_SetConfig+0x138>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <TIM_Base_SetConfig+0xb2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a23      	ldr	r2, [pc, #140]	; (800257c <TIM_Base_SetConfig+0x13c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d108      	bne.n	8002504 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <TIM_Base_SetConfig+0x114>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <TIM_Base_SetConfig+0xf8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <TIM_Base_SetConfig+0x124>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d103      	bne.n	8002540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	615a      	str	r2, [r3, #20]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40010000 	.word	0x40010000
 8002558:	40000400 	.word	0x40000400
 800255c:	40000800 	.word	0x40000800
 8002560:	40000c00 	.word	0x40000c00
 8002564:	40010400 	.word	0x40010400
 8002568:	40014000 	.word	0x40014000
 800256c:	40014400 	.word	0x40014400
 8002570:	40014800 	.word	0x40014800
 8002574:	40001800 	.word	0x40001800
 8002578:	40001c00 	.word	0x40001c00
 800257c:	40002000 	.word	0x40002000

08002580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002594:	2302      	movs	r3, #2
 8002596:	e05a      	b.n	800264e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a21      	ldr	r2, [pc, #132]	; (800265c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d022      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e4:	d01d      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1d      	ldr	r2, [pc, #116]	; (8002660 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d018      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1a      	ldr	r2, [pc, #104]	; (8002668 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00e      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a18      	ldr	r2, [pc, #96]	; (800266c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d009      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a17      	ldr	r2, [pc, #92]	; (8002670 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a15      	ldr	r2, [pc, #84]	; (8002674 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10c      	bne.n	800263c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	4313      	orrs	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40010000 	.word	0x40010000
 8002660:	40000400 	.word	0x40000400
 8002664:	40000800 	.word	0x40000800
 8002668:	40000c00 	.word	0x40000c00
 800266c:	40010400 	.word	0x40010400
 8002670:	40014000 	.word	0x40014000
 8002674:	40001800 	.word	0x40001800

08002678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e03f      	b.n	8002732 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7fe f920 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2224      	movs	r2, #36	; 0x24
 80026d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fb59 	bl	8002d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b088      	sub	sp, #32
 800273e:	af02      	add	r7, sp, #8
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	603b      	str	r3, [r7, #0]
 8002746:	4613      	mov	r3, r2
 8002748:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b20      	cmp	r3, #32
 8002758:	f040 8090 	bne.w	800287c <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_UART_Receive+0x2e>
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e088      	b.n	800287e <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_UART_Receive+0x40>
 8002776:	2302      	movs	r3, #2
 8002778:	e081      	b.n	800287e <HAL_UART_Receive+0x144>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2222      	movs	r2, #34	; 0x22
 800278c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002790:	f7fe fa1c 	bl	8000bcc <HAL_GetTick>
 8002794:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	88fa      	ldrh	r2, [r7, #6]
 800279a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	88fa      	ldrh	r2, [r7, #6]
 80027a0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027aa:	e05c      	b.n	8002866 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	d12b      	bne.n	800281c <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2200      	movs	r2, #0
 80027cc:	2120      	movs	r1, #32
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f978 	bl	8002ac4 <UART_WaitOnFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e04f      	b.n	800287e <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10c      	bne.n	8002804 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	3302      	adds	r3, #2
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	e030      	b.n	8002866 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	b29b      	uxth	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	b29a      	uxth	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3301      	adds	r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	e024      	b.n	8002866 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2200      	movs	r2, #0
 8002824:	2120      	movs	r1, #32
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f94c 	bl	8002ac4 <UART_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e023      	b.n	800287e <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d108      	bne.n	8002850 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	60ba      	str	r2, [r7, #8]
 800284a:	b2ca      	uxtb	r2, r1
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e00a      	b.n	8002866 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	1c59      	adds	r1, r3, #1
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d19d      	bne.n	80027ac <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	e000      	b.n	800287e <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800287c:	2302      	movs	r3, #2
  }
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10d      	bne.n	80028da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_UART_IRQHandler+0x52>
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f9e0 	bl	8002c98 <UART_Receive_IT>
      return;
 80028d8:	e0d1      	b.n	8002a7e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80b0 	beq.w	8002a42 <HAL_UART_IRQHandler+0x1ba>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_UART_IRQHandler+0x70>
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80a5 	beq.w	8002a42 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_UART_IRQHandler+0x90>
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_UART_IRQHandler+0xb0>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002930:	f043 0202 	orr.w	r2, r3, #2
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_UART_IRQHandler+0xd0>
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002950:	f043 0204 	orr.w	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00f      	beq.n	8002982 <HAL_UART_IRQHandler+0xfa>
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <HAL_UART_IRQHandler+0xee>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	f043 0208 	orr.w	r2, r3, #8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d078      	beq.n	8002a7c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_UART_IRQHandler+0x11c>
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f97a 	bl	8002c98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <HAL_UART_IRQHandler+0x144>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d031      	beq.n	8002a30 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8c3 	bl	8002b58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029dc:	2b40      	cmp	r3, #64	; 0x40
 80029de:	d123      	bne.n	8002a28 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <HAL_UART_IRQHandler+0x1fc>)
 80029fe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fa20 	bl	8000e4a <HAL_DMA_Abort_IT>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d016      	beq.n	8002a3e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1e:	e00e      	b.n	8002a3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f845 	bl	8002ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a26:	e00a      	b.n	8002a3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f841 	bl	8002ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2e:	e006      	b.n	8002a3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f83d 	bl	8002ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002a3c:	e01e      	b.n	8002a7c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3e:	bf00      	nop
    return;
 8002a40:	e01c      	b.n	8002a7c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_UART_IRQHandler+0x1d6>
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f8b0 	bl	8002bbc <UART_Transmit_IT>
    return;
 8002a5c:	e00f      	b.n	8002a7e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_UART_IRQHandler+0x1f6>
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8f8 	bl	8002c68 <UART_EndTransmit_IT>
    return;
 8002a78:	bf00      	nop
 8002a7a:	e000      	b.n	8002a7e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002a7c:	bf00      	nop
  }
}
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	08002b95 	.word	0x08002b95

08002a88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad4:	e02c      	b.n	8002b30 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d028      	beq.n	8002b30 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ae4:	f7fe f872 	bl	8000bcc <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d21d      	bcs.n	8002b30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b02:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e00f      	b.n	8002b50 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d0c3      	beq.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f7ff ff7e 	bl	8002ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b21      	cmp	r3, #33	; 0x21
 8002bce:	d144      	bne.n	8002c5a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd8:	d11a      	bne.n	8002c10 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	1c9a      	adds	r2, r3, #2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	621a      	str	r2, [r3, #32]
 8002c02:	e00e      	b.n	8002c22 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	621a      	str	r2, [r3, #32]
 8002c0e:	e008      	b.n	8002c22 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	1c59      	adds	r1, r3, #1
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6211      	str	r1, [r2, #32]
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10f      	bne.n	8002c56 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
  }
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff fefd 	bl	8002a88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b22      	cmp	r3, #34	; 0x22
 8002caa:	d171      	bne.n	8002d90 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb4:	d123      	bne.n	8002cfe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10e      	bne.n	8002ce2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	1c9a      	adds	r2, r3, #2
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28
 8002ce0:	e029      	b.n	8002d36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28
 8002cfc:	e01b      	b.n	8002d36 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6858      	ldr	r0, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	1c59      	adds	r1, r3, #1
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6291      	str	r1, [r2, #40]	; 0x28
 8002d16:	b2c2      	uxtb	r2, r0
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e00c      	b.n	8002d36 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	1c58      	adds	r0, r3, #1
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	6288      	str	r0, [r1, #40]	; 0x28
 8002d2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4619      	mov	r1, r3
 8002d44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d120      	bne.n	8002d8c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0220 	bic.w	r2, r2, #32
 8002d58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff fe8a 	bl	8002a9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e002      	b.n	8002d92 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e000      	b.n	8002d92 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002dde:	f023 030c 	bic.w	r3, r3, #12
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	68f9      	ldr	r1, [r7, #12]
 8002de8:	430b      	orrs	r3, r1
 8002dea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e0a:	f040 818b 	bne.w	8003124 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4ac1      	ldr	r2, [pc, #772]	; (8003118 <UART_SetConfig+0x37c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d005      	beq.n	8002e24 <UART_SetConfig+0x88>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4abf      	ldr	r2, [pc, #764]	; (800311c <UART_SetConfig+0x380>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	f040 80bd 	bne.w	8002f9e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e24:	f7fe fe70 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 8002e28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	461d      	mov	r5, r3
 8002e2e:	f04f 0600 	mov.w	r6, #0
 8002e32:	46a8      	mov	r8, r5
 8002e34:	46b1      	mov	r9, r6
 8002e36:	eb18 0308 	adds.w	r3, r8, r8
 8002e3a:	eb49 0409 	adc.w	r4, r9, r9
 8002e3e:	4698      	mov	r8, r3
 8002e40:	46a1      	mov	r9, r4
 8002e42:	eb18 0805 	adds.w	r8, r8, r5
 8002e46:	eb49 0906 	adc.w	r9, r9, r6
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e5e:	4688      	mov	r8, r1
 8002e60:	4691      	mov	r9, r2
 8002e62:	eb18 0005 	adds.w	r0, r8, r5
 8002e66:	eb49 0106 	adc.w	r1, r9, r6
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	461d      	mov	r5, r3
 8002e70:	f04f 0600 	mov.w	r6, #0
 8002e74:	196b      	adds	r3, r5, r5
 8002e76:	eb46 0406 	adc.w	r4, r6, r6
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4623      	mov	r3, r4
 8002e7e:	f7fd f9b5 	bl	80001ec <__aeabi_uldivmod>
 8002e82:	4603      	mov	r3, r0
 8002e84:	460c      	mov	r4, r1
 8002e86:	461a      	mov	r2, r3
 8002e88:	4ba5      	ldr	r3, [pc, #660]	; (8003120 <UART_SetConfig+0x384>)
 8002e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	461d      	mov	r5, r3
 8002e98:	f04f 0600 	mov.w	r6, #0
 8002e9c:	46a9      	mov	r9, r5
 8002e9e:	46b2      	mov	sl, r6
 8002ea0:	eb19 0309 	adds.w	r3, r9, r9
 8002ea4:	eb4a 040a 	adc.w	r4, sl, sl
 8002ea8:	4699      	mov	r9, r3
 8002eaa:	46a2      	mov	sl, r4
 8002eac:	eb19 0905 	adds.w	r9, r9, r5
 8002eb0:	eb4a 0a06 	adc.w	sl, sl, r6
 8002eb4:	f04f 0100 	mov.w	r1, #0
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ec0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ec4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ec8:	4689      	mov	r9, r1
 8002eca:	4692      	mov	sl, r2
 8002ecc:	eb19 0005 	adds.w	r0, r9, r5
 8002ed0:	eb4a 0106 	adc.w	r1, sl, r6
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	461d      	mov	r5, r3
 8002eda:	f04f 0600 	mov.w	r6, #0
 8002ede:	196b      	adds	r3, r5, r5
 8002ee0:	eb46 0406 	adc.w	r4, r6, r6
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	f7fd f980 	bl	80001ec <__aeabi_uldivmod>
 8002eec:	4603      	mov	r3, r0
 8002eee:	460c      	mov	r4, r1
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b8b      	ldr	r3, [pc, #556]	; (8003120 <UART_SetConfig+0x384>)
 8002ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	2164      	movs	r1, #100	; 0x64
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	3332      	adds	r3, #50	; 0x32
 8002f06:	4a86      	ldr	r2, [pc, #536]	; (8003120 <UART_SetConfig+0x384>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f14:	4498      	add	r8, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	461d      	mov	r5, r3
 8002f1a:	f04f 0600 	mov.w	r6, #0
 8002f1e:	46a9      	mov	r9, r5
 8002f20:	46b2      	mov	sl, r6
 8002f22:	eb19 0309 	adds.w	r3, r9, r9
 8002f26:	eb4a 040a 	adc.w	r4, sl, sl
 8002f2a:	4699      	mov	r9, r3
 8002f2c:	46a2      	mov	sl, r4
 8002f2e:	eb19 0905 	adds.w	r9, r9, r5
 8002f32:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f36:	f04f 0100 	mov.w	r1, #0
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f4a:	4689      	mov	r9, r1
 8002f4c:	4692      	mov	sl, r2
 8002f4e:	eb19 0005 	adds.w	r0, r9, r5
 8002f52:	eb4a 0106 	adc.w	r1, sl, r6
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	461d      	mov	r5, r3
 8002f5c:	f04f 0600 	mov.w	r6, #0
 8002f60:	196b      	adds	r3, r5, r5
 8002f62:	eb46 0406 	adc.w	r4, r6, r6
 8002f66:	461a      	mov	r2, r3
 8002f68:	4623      	mov	r3, r4
 8002f6a:	f7fd f93f 	bl	80001ec <__aeabi_uldivmod>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	460c      	mov	r4, r1
 8002f72:	461a      	mov	r2, r3
 8002f74:	4b6a      	ldr	r3, [pc, #424]	; (8003120 <UART_SetConfig+0x384>)
 8002f76:	fba3 1302 	umull	r1, r3, r3, r2
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2164      	movs	r1, #100	; 0x64
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	3332      	adds	r3, #50	; 0x32
 8002f88:	4a65      	ldr	r2, [pc, #404]	; (8003120 <UART_SetConfig+0x384>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	f003 0207 	and.w	r2, r3, #7
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4442      	add	r2, r8
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	e26f      	b.n	800347e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f9e:	f7fe fd9f 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 8002fa2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	461d      	mov	r5, r3
 8002fa8:	f04f 0600 	mov.w	r6, #0
 8002fac:	46a8      	mov	r8, r5
 8002fae:	46b1      	mov	r9, r6
 8002fb0:	eb18 0308 	adds.w	r3, r8, r8
 8002fb4:	eb49 0409 	adc.w	r4, r9, r9
 8002fb8:	4698      	mov	r8, r3
 8002fba:	46a1      	mov	r9, r4
 8002fbc:	eb18 0805 	adds.w	r8, r8, r5
 8002fc0:	eb49 0906 	adc.w	r9, r9, r6
 8002fc4:	f04f 0100 	mov.w	r1, #0
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fd0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fd4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fd8:	4688      	mov	r8, r1
 8002fda:	4691      	mov	r9, r2
 8002fdc:	eb18 0005 	adds.w	r0, r8, r5
 8002fe0:	eb49 0106 	adc.w	r1, r9, r6
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	461d      	mov	r5, r3
 8002fea:	f04f 0600 	mov.w	r6, #0
 8002fee:	196b      	adds	r3, r5, r5
 8002ff0:	eb46 0406 	adc.w	r4, r6, r6
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	f7fd f8f8 	bl	80001ec <__aeabi_uldivmod>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	460c      	mov	r4, r1
 8003000:	461a      	mov	r2, r3
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <UART_SetConfig+0x384>)
 8003004:	fba3 2302 	umull	r2, r3, r3, r2
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	461d      	mov	r5, r3
 8003012:	f04f 0600 	mov.w	r6, #0
 8003016:	46a9      	mov	r9, r5
 8003018:	46b2      	mov	sl, r6
 800301a:	eb19 0309 	adds.w	r3, r9, r9
 800301e:	eb4a 040a 	adc.w	r4, sl, sl
 8003022:	4699      	mov	r9, r3
 8003024:	46a2      	mov	sl, r4
 8003026:	eb19 0905 	adds.w	r9, r9, r5
 800302a:	eb4a 0a06 	adc.w	sl, sl, r6
 800302e:	f04f 0100 	mov.w	r1, #0
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800303a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800303e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003042:	4689      	mov	r9, r1
 8003044:	4692      	mov	sl, r2
 8003046:	eb19 0005 	adds.w	r0, r9, r5
 800304a:	eb4a 0106 	adc.w	r1, sl, r6
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	461d      	mov	r5, r3
 8003054:	f04f 0600 	mov.w	r6, #0
 8003058:	196b      	adds	r3, r5, r5
 800305a:	eb46 0406 	adc.w	r4, r6, r6
 800305e:	461a      	mov	r2, r3
 8003060:	4623      	mov	r3, r4
 8003062:	f7fd f8c3 	bl	80001ec <__aeabi_uldivmod>
 8003066:	4603      	mov	r3, r0
 8003068:	460c      	mov	r4, r1
 800306a:	461a      	mov	r2, r3
 800306c:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <UART_SetConfig+0x384>)
 800306e:	fba3 1302 	umull	r1, r3, r3, r2
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2164      	movs	r1, #100	; 0x64
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	3332      	adds	r3, #50	; 0x32
 8003080:	4a27      	ldr	r2, [pc, #156]	; (8003120 <UART_SetConfig+0x384>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800308e:	4498      	add	r8, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	461d      	mov	r5, r3
 8003094:	f04f 0600 	mov.w	r6, #0
 8003098:	46a9      	mov	r9, r5
 800309a:	46b2      	mov	sl, r6
 800309c:	eb19 0309 	adds.w	r3, r9, r9
 80030a0:	eb4a 040a 	adc.w	r4, sl, sl
 80030a4:	4699      	mov	r9, r3
 80030a6:	46a2      	mov	sl, r4
 80030a8:	eb19 0905 	adds.w	r9, r9, r5
 80030ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030c4:	4689      	mov	r9, r1
 80030c6:	4692      	mov	sl, r2
 80030c8:	eb19 0005 	adds.w	r0, r9, r5
 80030cc:	eb4a 0106 	adc.w	r1, sl, r6
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	461d      	mov	r5, r3
 80030d6:	f04f 0600 	mov.w	r6, #0
 80030da:	196b      	adds	r3, r5, r5
 80030dc:	eb46 0406 	adc.w	r4, r6, r6
 80030e0:	461a      	mov	r2, r3
 80030e2:	4623      	mov	r3, r4
 80030e4:	f7fd f882 	bl	80001ec <__aeabi_uldivmod>
 80030e8:	4603      	mov	r3, r0
 80030ea:	460c      	mov	r4, r1
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <UART_SetConfig+0x384>)
 80030f0:	fba3 1302 	umull	r1, r3, r3, r2
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	2164      	movs	r1, #100	; 0x64
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	3332      	adds	r3, #50	; 0x32
 8003102:	4a07      	ldr	r2, [pc, #28]	; (8003120 <UART_SetConfig+0x384>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	f003 0207 	and.w	r2, r3, #7
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4442      	add	r2, r8
 8003114:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003116:	e1b2      	b.n	800347e <UART_SetConfig+0x6e2>
 8003118:	40011000 	.word	0x40011000
 800311c:	40011400 	.word	0x40011400
 8003120:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4ad7      	ldr	r2, [pc, #860]	; (8003488 <UART_SetConfig+0x6ec>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d005      	beq.n	800313a <UART_SetConfig+0x39e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4ad6      	ldr	r2, [pc, #856]	; (800348c <UART_SetConfig+0x6f0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	f040 80d1 	bne.w	80032dc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800313a:	f7fe fce5 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 800313e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	469a      	mov	sl, r3
 8003144:	f04f 0b00 	mov.w	fp, #0
 8003148:	46d0      	mov	r8, sl
 800314a:	46d9      	mov	r9, fp
 800314c:	eb18 0308 	adds.w	r3, r8, r8
 8003150:	eb49 0409 	adc.w	r4, r9, r9
 8003154:	4698      	mov	r8, r3
 8003156:	46a1      	mov	r9, r4
 8003158:	eb18 080a 	adds.w	r8, r8, sl
 800315c:	eb49 090b 	adc.w	r9, r9, fp
 8003160:	f04f 0100 	mov.w	r1, #0
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800316c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003170:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003174:	4688      	mov	r8, r1
 8003176:	4691      	mov	r9, r2
 8003178:	eb1a 0508 	adds.w	r5, sl, r8
 800317c:	eb4b 0609 	adc.w	r6, fp, r9
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4619      	mov	r1, r3
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	f04f 0400 	mov.w	r4, #0
 8003192:	0094      	lsls	r4, r2, #2
 8003194:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003198:	008b      	lsls	r3, r1, #2
 800319a:	461a      	mov	r2, r3
 800319c:	4623      	mov	r3, r4
 800319e:	4628      	mov	r0, r5
 80031a0:	4631      	mov	r1, r6
 80031a2:	f7fd f823 	bl	80001ec <__aeabi_uldivmod>
 80031a6:	4603      	mov	r3, r0
 80031a8:	460c      	mov	r4, r1
 80031aa:	461a      	mov	r2, r3
 80031ac:	4bb8      	ldr	r3, [pc, #736]	; (8003490 <UART_SetConfig+0x6f4>)
 80031ae:	fba3 2302 	umull	r2, r3, r3, r2
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	469b      	mov	fp, r3
 80031bc:	f04f 0c00 	mov.w	ip, #0
 80031c0:	46d9      	mov	r9, fp
 80031c2:	46e2      	mov	sl, ip
 80031c4:	eb19 0309 	adds.w	r3, r9, r9
 80031c8:	eb4a 040a 	adc.w	r4, sl, sl
 80031cc:	4699      	mov	r9, r3
 80031ce:	46a2      	mov	sl, r4
 80031d0:	eb19 090b 	adds.w	r9, r9, fp
 80031d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031d8:	f04f 0100 	mov.w	r1, #0
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ec:	4689      	mov	r9, r1
 80031ee:	4692      	mov	sl, r2
 80031f0:	eb1b 0509 	adds.w	r5, fp, r9
 80031f4:	eb4c 060a 	adc.w	r6, ip, sl
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4619      	mov	r1, r3
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	f04f 0400 	mov.w	r4, #0
 800320a:	0094      	lsls	r4, r2, #2
 800320c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003210:	008b      	lsls	r3, r1, #2
 8003212:	461a      	mov	r2, r3
 8003214:	4623      	mov	r3, r4
 8003216:	4628      	mov	r0, r5
 8003218:	4631      	mov	r1, r6
 800321a:	f7fc ffe7 	bl	80001ec <__aeabi_uldivmod>
 800321e:	4603      	mov	r3, r0
 8003220:	460c      	mov	r4, r1
 8003222:	461a      	mov	r2, r3
 8003224:	4b9a      	ldr	r3, [pc, #616]	; (8003490 <UART_SetConfig+0x6f4>)
 8003226:	fba3 1302 	umull	r1, r3, r3, r2
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2164      	movs	r1, #100	; 0x64
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	3332      	adds	r3, #50	; 0x32
 8003238:	4a95      	ldr	r2, [pc, #596]	; (8003490 <UART_SetConfig+0x6f4>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003244:	4498      	add	r8, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	469b      	mov	fp, r3
 800324a:	f04f 0c00 	mov.w	ip, #0
 800324e:	46d9      	mov	r9, fp
 8003250:	46e2      	mov	sl, ip
 8003252:	eb19 0309 	adds.w	r3, r9, r9
 8003256:	eb4a 040a 	adc.w	r4, sl, sl
 800325a:	4699      	mov	r9, r3
 800325c:	46a2      	mov	sl, r4
 800325e:	eb19 090b 	adds.w	r9, r9, fp
 8003262:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003266:	f04f 0100 	mov.w	r1, #0
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003272:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003276:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800327a:	4689      	mov	r9, r1
 800327c:	4692      	mov	sl, r2
 800327e:	eb1b 0509 	adds.w	r5, fp, r9
 8003282:	eb4c 060a 	adc.w	r6, ip, sl
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4619      	mov	r1, r3
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	f04f 0400 	mov.w	r4, #0
 8003298:	0094      	lsls	r4, r2, #2
 800329a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800329e:	008b      	lsls	r3, r1, #2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4623      	mov	r3, r4
 80032a4:	4628      	mov	r0, r5
 80032a6:	4631      	mov	r1, r6
 80032a8:	f7fc ffa0 	bl	80001ec <__aeabi_uldivmod>
 80032ac:	4603      	mov	r3, r0
 80032ae:	460c      	mov	r4, r1
 80032b0:	461a      	mov	r2, r3
 80032b2:	4b77      	ldr	r3, [pc, #476]	; (8003490 <UART_SetConfig+0x6f4>)
 80032b4:	fba3 1302 	umull	r1, r3, r3, r2
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	2164      	movs	r1, #100	; 0x64
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	3332      	adds	r3, #50	; 0x32
 80032c6:	4a72      	ldr	r2, [pc, #456]	; (8003490 <UART_SetConfig+0x6f4>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	f003 020f 	and.w	r2, r3, #15
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4442      	add	r2, r8
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	e0d0      	b.n	800347e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80032dc:	f7fe fc00 	bl	8001ae0 <HAL_RCC_GetPCLK1Freq>
 80032e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	469a      	mov	sl, r3
 80032e6:	f04f 0b00 	mov.w	fp, #0
 80032ea:	46d0      	mov	r8, sl
 80032ec:	46d9      	mov	r9, fp
 80032ee:	eb18 0308 	adds.w	r3, r8, r8
 80032f2:	eb49 0409 	adc.w	r4, r9, r9
 80032f6:	4698      	mov	r8, r3
 80032f8:	46a1      	mov	r9, r4
 80032fa:	eb18 080a 	adds.w	r8, r8, sl
 80032fe:	eb49 090b 	adc.w	r9, r9, fp
 8003302:	f04f 0100 	mov.w	r1, #0
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800330e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003312:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003316:	4688      	mov	r8, r1
 8003318:	4691      	mov	r9, r2
 800331a:	eb1a 0508 	adds.w	r5, sl, r8
 800331e:	eb4b 0609 	adc.w	r6, fp, r9
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4619      	mov	r1, r3
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	f04f 0400 	mov.w	r4, #0
 8003334:	0094      	lsls	r4, r2, #2
 8003336:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800333a:	008b      	lsls	r3, r1, #2
 800333c:	461a      	mov	r2, r3
 800333e:	4623      	mov	r3, r4
 8003340:	4628      	mov	r0, r5
 8003342:	4631      	mov	r1, r6
 8003344:	f7fc ff52 	bl	80001ec <__aeabi_uldivmod>
 8003348:	4603      	mov	r3, r0
 800334a:	460c      	mov	r4, r1
 800334c:	461a      	mov	r2, r3
 800334e:	4b50      	ldr	r3, [pc, #320]	; (8003490 <UART_SetConfig+0x6f4>)
 8003350:	fba3 2302 	umull	r2, r3, r3, r2
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	469b      	mov	fp, r3
 800335e:	f04f 0c00 	mov.w	ip, #0
 8003362:	46d9      	mov	r9, fp
 8003364:	46e2      	mov	sl, ip
 8003366:	eb19 0309 	adds.w	r3, r9, r9
 800336a:	eb4a 040a 	adc.w	r4, sl, sl
 800336e:	4699      	mov	r9, r3
 8003370:	46a2      	mov	sl, r4
 8003372:	eb19 090b 	adds.w	r9, r9, fp
 8003376:	eb4a 0a0c 	adc.w	sl, sl, ip
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003386:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800338a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800338e:	4689      	mov	r9, r1
 8003390:	4692      	mov	sl, r2
 8003392:	eb1b 0509 	adds.w	r5, fp, r9
 8003396:	eb4c 060a 	adc.w	r6, ip, sl
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4619      	mov	r1, r3
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	f04f 0400 	mov.w	r4, #0
 80033ac:	0094      	lsls	r4, r2, #2
 80033ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033b2:	008b      	lsls	r3, r1, #2
 80033b4:	461a      	mov	r2, r3
 80033b6:	4623      	mov	r3, r4
 80033b8:	4628      	mov	r0, r5
 80033ba:	4631      	mov	r1, r6
 80033bc:	f7fc ff16 	bl	80001ec <__aeabi_uldivmod>
 80033c0:	4603      	mov	r3, r0
 80033c2:	460c      	mov	r4, r1
 80033c4:	461a      	mov	r2, r3
 80033c6:	4b32      	ldr	r3, [pc, #200]	; (8003490 <UART_SetConfig+0x6f4>)
 80033c8:	fba3 1302 	umull	r1, r3, r3, r2
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	2164      	movs	r1, #100	; 0x64
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	3332      	adds	r3, #50	; 0x32
 80033da:	4a2d      	ldr	r2, [pc, #180]	; (8003490 <UART_SetConfig+0x6f4>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e6:	4498      	add	r8, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	469b      	mov	fp, r3
 80033ec:	f04f 0c00 	mov.w	ip, #0
 80033f0:	46d9      	mov	r9, fp
 80033f2:	46e2      	mov	sl, ip
 80033f4:	eb19 0309 	adds.w	r3, r9, r9
 80033f8:	eb4a 040a 	adc.w	r4, sl, sl
 80033fc:	4699      	mov	r9, r3
 80033fe:	46a2      	mov	sl, r4
 8003400:	eb19 090b 	adds.w	r9, r9, fp
 8003404:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003408:	f04f 0100 	mov.w	r1, #0
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003414:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003418:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800341c:	4689      	mov	r9, r1
 800341e:	4692      	mov	sl, r2
 8003420:	eb1b 0509 	adds.w	r5, fp, r9
 8003424:	eb4c 060a 	adc.w	r6, ip, sl
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4619      	mov	r1, r3
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	f04f 0400 	mov.w	r4, #0
 800343a:	0094      	lsls	r4, r2, #2
 800343c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003440:	008b      	lsls	r3, r1, #2
 8003442:	461a      	mov	r2, r3
 8003444:	4623      	mov	r3, r4
 8003446:	4628      	mov	r0, r5
 8003448:	4631      	mov	r1, r6
 800344a:	f7fc fecf 	bl	80001ec <__aeabi_uldivmod>
 800344e:	4603      	mov	r3, r0
 8003450:	460c      	mov	r4, r1
 8003452:	461a      	mov	r2, r3
 8003454:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <UART_SetConfig+0x6f4>)
 8003456:	fba3 1302 	umull	r1, r3, r3, r2
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2164      	movs	r1, #100	; 0x64
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	3332      	adds	r3, #50	; 0x32
 8003468:	4a09      	ldr	r2, [pc, #36]	; (8003490 <UART_SetConfig+0x6f4>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	f003 020f 	and.w	r2, r3, #15
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4442      	add	r2, r8
 800347a:	609a      	str	r2, [r3, #8]
}
 800347c:	e7ff      	b.n	800347e <UART_SetConfig+0x6e2>
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003488:	40011000 	.word	0x40011000
 800348c:	40011400 	.word	0x40011400
 8003490:	51eb851f 	.word	0x51eb851f

08003494 <__libc_init_array>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	4e0d      	ldr	r6, [pc, #52]	; (80034cc <__libc_init_array+0x38>)
 8003498:	4c0d      	ldr	r4, [pc, #52]	; (80034d0 <__libc_init_array+0x3c>)
 800349a:	1ba4      	subs	r4, r4, r6
 800349c:	10a4      	asrs	r4, r4, #2
 800349e:	2500      	movs	r5, #0
 80034a0:	42a5      	cmp	r5, r4
 80034a2:	d109      	bne.n	80034b8 <__libc_init_array+0x24>
 80034a4:	4e0b      	ldr	r6, [pc, #44]	; (80034d4 <__libc_init_array+0x40>)
 80034a6:	4c0c      	ldr	r4, [pc, #48]	; (80034d8 <__libc_init_array+0x44>)
 80034a8:	f000 f820 	bl	80034ec <_init>
 80034ac:	1ba4      	subs	r4, r4, r6
 80034ae:	10a4      	asrs	r4, r4, #2
 80034b0:	2500      	movs	r5, #0
 80034b2:	42a5      	cmp	r5, r4
 80034b4:	d105      	bne.n	80034c2 <__libc_init_array+0x2e>
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
 80034b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034bc:	4798      	blx	r3
 80034be:	3501      	adds	r5, #1
 80034c0:	e7ee      	b.n	80034a0 <__libc_init_array+0xc>
 80034c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034c6:	4798      	blx	r3
 80034c8:	3501      	adds	r5, #1
 80034ca:	e7f2      	b.n	80034b2 <__libc_init_array+0x1e>
 80034cc:	08003524 	.word	0x08003524
 80034d0:	08003524 	.word	0x08003524
 80034d4:	08003524 	.word	0x08003524
 80034d8:	08003528 	.word	0x08003528

080034dc <memset>:
 80034dc:	4402      	add	r2, r0
 80034de:	4603      	mov	r3, r0
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d100      	bne.n	80034e6 <memset+0xa>
 80034e4:	4770      	bx	lr
 80034e6:	f803 1b01 	strb.w	r1, [r3], #1
 80034ea:	e7f9      	b.n	80034e0 <memset+0x4>

080034ec <_init>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	bf00      	nop
 80034f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f2:	bc08      	pop	{r3}
 80034f4:	469e      	mov	lr, r3
 80034f6:	4770      	bx	lr

080034f8 <_fini>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr
